from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, CallbackQuery
from aiogram.enums import ParseMode
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.strategy import FSMStrategy
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram import Router
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import CommandStart
import asyncio
import logging
import config_example as config
from services.google_sheets import append_to_sheet, is_report_already_submitted
from services.notifier import notify_owner
from services.photo_upload import upload_photo_to_drive
from datetime import datetime, timedelta
from apscheduler.schedulers.asyncio import AsyncIOScheduler
import os
import html
import json

# –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ google_credentials.json –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π —Å—Ä–µ–¥—ã
if os.getenv("GOOGLE_CREDENTIALS_JSON"):
    with open("google_credentials.json", "w") as f:
        json.dump(json.loads(os.getenv("GOOGLE_CREDENTIALS_JSON")), f)


class ReportStates(StatesGroup):
    idle = State()
    waiting_for_income = State()
    waiting_for_photo = State()
    waiting_for_date = State()
    waiting_for_comment = State()
    waiting_for_investor_message = State()

router = Router()

@router.message(CommandStart())
async def start_command(msg: Message, state: FSMContext):
    kb = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="‚ñ∂Ô∏è –°—Ç–∞—Ä—Ç")]], resize_keyboard=True
    )
    await msg.answer("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.", reply_markup=kb)
    await state.set_state(ReportStates.idle)

@router.message(F.text == "‚ñ∂Ô∏è –°—Ç–∞—Ä—Ç")
async def start_pressed(msg: Message, state: FSMContext):
    kb_buttons = [[KeyboardButton(text="üìÑ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç")]]
    if str(msg.from_user.id) == os.getenv("INVESTOR_ID"):
        kb_buttons.append([KeyboardButton(text="üì® –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü—É")])
    kb = ReplyKeyboardMarkup(keyboard=kb_buttons, resize_keyboard=True)
    await msg.answer("‚úÖ –û—Ç–ª–∏—á–Ω–æ! –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb)

@router.message(lambda msg: msg.text and "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç" in msg.text)
async def report_entry(msg: Message, state: FSMContext):
    await msg.answer("üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–æ—Ö–æ–¥–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è:")
    await state.set_state(ReportStates.waiting_for_income)

@router.message(lambda msg: msg.text and "–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü—É" in msg.text)
async def investor_message_start(msg: Message, state: FSMContext):
    if str(msg.from_user.id) != os.getenv("INVESTOR_ID"):
        await msg.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    await msg.answer("‚úèÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤–ª–∞–¥–µ–ª—å—Ü—É –∫–∞—Ñ–µ:")
    await state.set_state(ReportStates.waiting_for_investor_message)

@router.message(ReportStates.waiting_for_investor_message)
async def receive_investor_message(msg: Message, state: FSMContext):
    owner_id = int(os.getenv("OWNER_ID"))
    await msg.bot.send_message(owner_id, f"üì® <b>–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∏–Ω–≤–µ—Å—Ç–æ—Ä–∞:</b>\n{html.escape(msg.text)}", parse_mode="HTML")
    await msg.answer("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤–ª–∞–¥–µ–ª—å—Ü—É –∫–∞—Ñ–µ")
    await state.set_state(ReportStates.idle)

@router.message(ReportStates.waiting_for_income)
async def get_income(msg: Message, state: FSMContext):
    try:
        income = float(msg.text)
        await state.update_data(income=income)

        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üì∑‚ùå–ë–µ–∑ —Ñ–æ—Ç–æ", callback_data="skip_photo")]
        ])
        await msg.answer("üì∑ –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –æ—Ç—á–µ—Ç–∞", reply_markup=kb)
        await state.set_state(ReportStates.waiting_for_photo)
    except ValueError:
        await msg.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —Ü–∏—Ñ—Ä—É –¥–æ—Ö–æ–¥–∞")

@router.message(ReportStates.waiting_for_photo)
async def get_photo(msg: Message, state: FSMContext, bot: Bot):
    if not msg.photo:
        return await msg.answer("‚ùå –≠—Ç–æ –Ω–µ —Ñ–æ—Ç–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É \"–û—Ç–ø—Ä–∞–≤–∏—Ç—å –±–µ–∑ —Ñ–æ—Ç–æ\".")

    photo = msg.photo[-1]
    file = await bot.get_file(photo.file_id)
    photo_path = f"data/report_{msg.chat.id}_{photo.file_id}.jpg"
    await bot.download_file(file.file_path, photo_path)
    await state.update_data(photo_path=photo_path)

    await ask_for_date(msg, state)

@router.callback_query(F.data == "skip_photo")
async def skip_photo(callback: CallbackQuery, state: FSMContext):
    await state.update_data(photo_path=None)
    await callback.answer()
    await ask_for_date(callback.message, state)

async def ask_for_date(msg: Message, state: FSMContext):
    today = datetime.now().date()
    yesterday = today - timedelta(days=1)

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"üìÖ –°–µ–≥–æ–¥–Ω—è ({today.strftime('%d.%m.%Y')})", callback_data="date_today")],
        [InlineKeyboardButton(text=f"üìÜ –í—á–µ—Ä–∞ ({yesterday.strftime('%d.%m.%Y')})", callback_data="date_yesterday")]
    ])
    await msg.answer("üìÜ –£–∫–∞–∂–∏—Ç–µ, –∑–∞ –∫–∞–∫–æ–π –¥–µ–Ω—å –æ—Ç—á—ë—Ç:", reply_markup=kb)
    await state.set_state(ReportStates.waiting_for_date)

@router.callback_query(F.data.in_(["date_today", "date_yesterday"]))
async def handle_date(callback: CallbackQuery, state: FSMContext):
    choice = callback.data
    report_date = datetime.now().date() if choice == "date_today" else datetime.now().date() - timedelta(days=1)
    report_date_str = report_date.strftime("%d.%m.%Y")

    if is_report_already_submitted(report_date_str):
        await callback.message.answer("‚ö†Ô∏è –û—Ç—á—ë—Ç –∑–∞ —ç—Ç—É –¥–∞—Ç—É —É–∂–µ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞.")
        await state.set_state(ReportStates.idle)
        return

    await state.update_data(report_date=report_date_str)
    await callback.message.answer("‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:", reply_markup=
        InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úâÔ∏è –û—Ç–ø—Ä–∞–≤–∏—Ç—å –±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è", callback_data="skip_comment")]
        ])
    )
    await callback.answer()
    await state.set_state(ReportStates.waiting_for_comment)

@router.callback_query(F.data == "skip_comment")
async def skip_comment(callback: CallbackQuery, state: FSMContext):
    await save_report(callback.message, state, comment="‚Äî")
    await callback.message.answer("‚úÖ –û—Ç—á—ë—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∏–Ω–≤–µ—Å—Ç–æ—Ä—É")
    await state.set_state(ReportStates.idle)
    await callback.answer()

@router.message(ReportStates.waiting_for_comment)
async def get_comment(msg: Message, state: FSMContext):
    await save_report(msg, state, comment=msg.text)
    await msg.answer("‚úÖ –û—Ç—á—ë—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∏–Ω–≤–µ—Å—Ç–æ—Ä—É")
    await state.set_state(ReportStates.idle)

async def save_report(msg, state, comment: str):
    data = await state.get_data()
    income = data.get("income")
    photo_path = data.get("photo_path")
    report_date = data.get("report_date")
    percent = round(income * 0.07, 2)
    drive_url = "‚Äî"

    if photo_path:
        try:
            drive_url = upload_photo_to_drive(photo_path, report_date)
        except Exception as e:
            error_msg = html.escape(str(e))
            await msg.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ:\n<pre>{error_msg}</pre>", parse_mode="HTML")

    append_to_sheet(report_date, income, percent, drive_url, comment)

    await msg.bot.send_message(
        int(os.getenv("INVESTOR_ID")),
        f"üì• <b>–û—Ç—á—ë—Ç –æ—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∫–∞—Ñ–µ:</b>\n"
        f"üìÖ <b>–î–∞—Ç–∞:</b> {report_date}\n"
        f"üí∞ <b>–î–æ—Ö–æ–¥:</b> {income} —Å–æ–º\n"
        f"üìä <b>7% –∏–Ω–≤–µ—Å—Ç–æ—Ä—É:</b> {percent} —Å–æ–º\n"
        f"üñºÔ∏è <b>–§–æ—Ç–æ:</b> {drive_url}\n"
        f"üí¨ <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> {comment or '‚Äî'}",
        parse_mode="HTML"
    )

@router.message()
async def unknown_input(msg: Message, state: FSMContext):
    current_state = await state.get_state()
    allowed_states = [
        ReportStates.waiting_for_income.state,
        ReportStates.waiting_for_photo.state,
        ReportStates.waiting_for_comment.state,
        ReportStates.waiting_for_date.state,
        ReportStates.waiting_for_investor_message.state
    ]
    allowed_texts = ["üìÑ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç", "‚ñ∂Ô∏è –°—Ç–∞—Ä—Ç", "üì® –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü—É"]

    if msg.text in allowed_texts or current_state in allowed_states:
        return

    await msg.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏. –¢–µ–∫—Å—Ç –∑–¥–µ—Å—å –Ω–µ –Ω—É–∂–µ–Ω.")

async def main():
    logging.basicConfig(level=logging.INFO)
    bot = Bot(token=config.BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
    dp = Dispatcher(storage=MemoryStorage(), fsm_strategy=FSMStrategy.CHAT)
    dp.include_router(router)

    scheduler = AsyncIOScheduler()
    scheduler.add_job(notify_owner, 'cron', hour=21, minute=0, args=[bot])
    scheduler.start()

    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
