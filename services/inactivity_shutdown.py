from datetime import datetime
import os
import json
import gspread
from google.oauth2.service_account import Credentials
from gspread.exceptions import WorksheetNotFound
from config import GSHEET_NAME
import requests
import asyncio
import signal
from services.google_auth import get_google_credentials



# === Webhook URL –¥–ª—è –≤—ã–ø–∞–¥–∞—é—â–∏—Ö —Å—Ç–∞—Ç—É—Å–æ–≤
WEBHOOK_URL = "https://script.google.com/macros/s/YOUR_WEBHOOK_ID/exec"

# === –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
scope = [
    "https://www.googleapis.com/auth/spreadsheets",
    "https://www.googleapis.com/auth/drive"
]

# ‚úÖ Railway + –ª–æ–∫–∞–ª—å–Ω—ã–π fallback
json_data = os.getenv("GOOGLE_CREDENTIALS_JSON")
if json_data:
    creds_dict = json.loads(json_data)
else:
    with open("google_credentials.json") as f:
        creds_dict = json.load(f)

creds = get_google_credentials(scope)
client = gspread.authorize(creds)

# === –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã ===
HEADER = ["‚Ññ", "–î–∞—Ç–∞", "–î–æ—Ö–æ–¥", "7% –∏–Ω–≤–µ—Å—Ç–æ—Ä—É", "–°—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–æ—Ç–æ", "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", "–°—Ç–∞—Ç—É—Å"]

# === –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤—ã–ø–∞–¥–∞—é—â–∏—Ö —Å—Ç–∞—Ç—É—Å–æ–≤ ===
def trigger_status_dropdown(sheet_name: str):
    try:
        response = requests.post(WEBHOOK_URL, json={"sheet_name": sheet_name})
        if response.status_code == 200:
            print(f"‚úÖ Webhook –≤—ã–ø–æ–ª–Ω–µ–Ω: {response.text}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ webhook: {response.status_code} ‚Äî {response.text}")
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ webhook: {e}")

# === –ü–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –ª–∏—Å—Ç Google Sheets ===
def get_or_create_sheet(sheet_title: str):
    try:
        sheet = client.open(GSHEET_NAME).worksheet(sheet_title)
    except WorksheetNotFound:
        sheet = client.open(GSHEET_NAME).add_worksheet(title=sheet_title, rows="1000", cols="10")
        sheet.append_row(HEADER)
        sheet.format("A1:G1", {
            "backgroundColor": {"red": 0.7, "green": 0.9, "blue": 0.8},
            "horizontalAlignment": "CENTER",
            "textFormat": {"bold": True}
        })
        trigger_status_dropdown(sheet_title)
    return sheet

# === –î–æ–±–∞–≤–∏—Ç—å –æ—Ç—á—ë—Ç –≤ —Ç–∞–±–ª–∏—Ü—É ===
def append_to_sheet(date, income, percent, photo_url, comment):
    sheet_title = date_str_to_month(date)
    sheet = get_or_create_sheet(sheet_title)

    all_values = sheet.get_all_values()
    for i, row in enumerate(all_values, start=1):
        if row and row[0].strip().lower() == "–∏—Ç–æ–≥–æ:":
            sheet.delete_rows(i)
            break

    data_start_row = 2
    next_row_index = len(all_values) + 1 if len(all_values) >= data_start_row else data_start_row

    new_row = [
        str(next_row_index - 1),
        date,
        income,
        percent,
        photo_url,
        comment,
        ""
    ]
    sheet.insert_row(new_row, next_row_index)

    total_row_index = len(sheet.get_all_values()) + 2
    sheet.update(f"A{total_row_index}", [["–ò–¢–û–ì–û:"]])
    sheet.update_acell(f"C{total_row_index}", f"=SUM(C2:C{total_row_index - 2})")
    sheet.update_acell(f"D{total_row_index}", f"=SUM(D2:D{total_row_index - 2})")

    sheet.format(f"A{total_row_index}:G{total_row_index}", {
        "backgroundColor": {"red": 0.9, "green": 0.9, "blue": 0.9},
        "textFormat": {"bold": True},
        "horizontalAlignment": "CENTER"
    })

# === –ü—Ä–æ–≤–µ—Ä–∫–∞ ‚Äî –±—ã–ª –ª–∏ —É–∂–µ –æ—Ç—á—ë—Ç –∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É ===
def is_report_already_submitted(date_str: str) -> bool:
    try:
        sheet = client.open(GSHEET_NAME).worksheet(date_str_to_month(date_str))
        data = sheet.get_all_values()
        for row in data[1:]:
            if len(row) > 1 and row[1].strip() == date_str:
                return True
        return False
    except WorksheetNotFound:
        return False

# === –ü–æ–ª—É—á–∏—Ç—å –º–µ—Å—è—Ü –∏–∑ –¥–∞—Ç—ã (–Ω–∞ –∞–Ω–≥–ª.) ===
def date_str_to_month(date_str: str) -> str:
    date_obj = datetime.strptime(date_str, "%d.%m.%Y")
    return date_obj.strftime("%B")

# === Shutdown –µ—Å–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω 15 –º–∏–Ω—É—Ç ===
INACTIVITY_TIMEOUT = 900  # 15 –º–∏–Ω—É—Ç
last_active = datetime.now()

async def inactivity_watcher():
    global last_active
    while True:
        await asyncio.sleep(30)
        if (datetime.now() - last_active).total_seconds() > INACTIVITY_TIMEOUT:
            print("üí§ –ë–æ—Ç –±–µ–∑–¥–µ–π—Å—Ç–≤—É–µ—Ç. –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ —Ä–µ—Å—É—Ä—Å–æ–≤.")
            os.kill(os.getpid(), signal.SIGTERM)

# –≠—Ç—É –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–ª—è—Ç—å –≤–Ω—É—Ç—Ä–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
# from this_module import update_activity_timestamp

def update_activity_timestamp():
    global last_active
    last_active = datetime.now()
